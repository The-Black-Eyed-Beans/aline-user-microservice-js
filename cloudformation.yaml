AWSTemplateFormatVersion: 2010-09-09
Metadata:
  Cluster: arn:aws:ecs:us-west-1:086620157175:cluster/ECScluster-js
Resources:
  CloudMap:
    Properties:
      Description: Service Map for Docker Compose project aline-user-microservice
      Name: aline-user-microservice.local
      Vpc: vpc-08516db90a3eced51
    Type: AWS::ServiceDiscovery::PrivateDnsNamespace
  Default8070Ingress:
    Properties:
      CidrIp: 0.0.0.0/0
      Description: user:8070/tcp on default network
      FromPort: 8070
      GroupId:
        Ref: DefaultNetwork
      IpProtocol: TCP
      ToPort: 8070
    Type: AWS::EC2::SecurityGroupIngress
  DefaultNetwork:
    Properties:
      GroupDescription: aline-user-microservice Security Group for default network
      Tags:
      - Key: com.docker.compose.project
        Value: aline-user-microservice
      - Key: com.docker.compose.network
        Value: aline-user-microservice_default
      VpcId: vpc-08516db90a3eced51
    Type: AWS::EC2::SecurityGroup
  DefaultNetworkIngress:
    Properties:
      Description: Allow communication within network default
      GroupId:
        Ref: DefaultNetwork
      IpProtocol: "-1"
      SourceSecurityGroupId:
        Ref: DefaultNetwork
    Type: AWS::EC2::SecurityGroupIngress
  LoadBalancer:
    Properties:
      LoadBalancerAttributes:
      - Key: load_balancing.cross_zone.enabled
        Value: "true"
      Scheme: internet-facing
      Subnets:
      - subnet-050f9c6702006fea6
      - subnet-081d180e417ada6c0
      Tags:
      - Key: com.docker.compose.project
        Value: aline-user-microservice
      Type: network
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
  LogGroup:
    Properties:
      LogGroupName: /docker-compose/aline-user-microservice
    Type: AWS::Logs::LogGroup
  UserService:
    DependsOn:
    - UserTCP8070Listener
    Properties:
      Cluster: arn:aws:ecs:us-west-1:086620157175:cluster/ECScluster-js
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DeploymentController:
        Type: ECS
      DesiredCount: 1
      LaunchType: FARGATE
      LoadBalancers:
      - ContainerName: user
        ContainerPort: 8070
        TargetGroupArn:
          Ref: UserTCP8070TargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
          - Ref: DefaultNetwork
          Subnets:
          - subnet-050f9c6702006fea6
          - subnet-081d180e417ada6c0
      PlatformVersion: 1.4.0
      PropagateTags: SERVICE
      SchedulingStrategy: REPLICA
      ServiceRegistries:
      - RegistryArn:
          Fn::GetAtt:
          - UserServiceDiscoveryEntry
          - Arn
      Tags:
      - Key: com.docker.compose.project
        Value: aline-user-microservice
      - Key: com.docker.compose.service
        Value: user
      TaskDefinition:
        Ref: UserTaskDefinition
    Type: AWS::ECS::Service
  UserServiceDiscoveryEntry:
    Properties:
      Description: '"user" service discovery entry in Cloud Map'
      DnsConfig:
        DnsRecords:
        - TTL: 60
          Type: A
        RoutingPolicy: MULTIVALUE
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: user
      NamespaceId:
        Ref: CloudMap
    Type: AWS::ServiceDiscovery::Service
  UserTCP8070Listener:
    Properties:
      DefaultActions:
      - ForwardConfig:
          TargetGroups:
          - TargetGroupArn:
              Ref: UserTCP8070TargetGroup
        Type: forward
      LoadBalancerArn:
        Ref: LoadBalancer
      Port: 8070
      Protocol: TCP
    Type: AWS::ElasticLoadBalancingV2::Listener
  UserTCP8070TargetGroup:
    Properties:
      Port: 8070
      Protocol: TCP
      Tags:
      - Key: com.docker.compose.project
        Value: aline-user-microservice
      TargetType: ip
      VpcId: vpc-08516db90a3eced51
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
  UserTaskDefinition:
    Properties:
      ContainerDefinitions:
      - Command:
        - us-west-1.compute.internal
        - aline-user-microservice.local
        Essential: false
        Image: docker/ecs-searchdomain-sidecar:1.0
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: LogGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: aline-user-microservice
        Name: User_ResolvConf_InitContainer
      - DependsOn:
        - Condition: SUCCESS
          ContainerName: User_ResolvConf_InitContainer
        Environment:
        - Name: APP_PORT
          Value: "8083"
        - Name: DB_HOST
          Value: aline-database-instance-1.cpghzbngoldo.us-east-1.rds.amazonaws.com
        - Name: DB_NAME
          Value: alinedb-js
        - Name: DB_PASSWORD
          Value: pramodchandrakarthickakbar1!
        - Name: DB_PORT
          Value: "3306"
        - Name: DB_USERNAME
          Value: admin
        - Name: ENCRYPT_SECRET_KEY
          Value: NVNCWq4KEDHXNjsazdGX20Z1
        - Name: JWT_SECRET_KEY
          Value: 1wHqQFdUlUr5TZNr1wTCiuyM0Vye2L4jXX
        Essential: true
        Image: 086620157175.dkr.ecr.us-west-1.amazonaws.com/user-microservice-js:latest@sha256:b3dfff589b88570502ced2674a46c9d708786c72432fc84bde15664b5df43bb9
        LinuxParameters: {}
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: LogGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: aline-user-microservice
        Name: user
        PortMappings:
        - ContainerPort: 8070
          HostPort: 8070
          Protocol: tcp
      Cpu: "256"
      ExecutionRoleArn:
        Ref: UserTaskExecutionRole
      Family: aline-user-microservice-user
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities:
      - FARGATE
    Type: AWS::ECS::TaskDefinition
  UserTaskExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Condition: {}
          Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      Tags:
      - Key: com.docker.compose.project
        Value: aline-user-microservice
      - Key: com.docker.compose.service
        Value: user
    Type: AWS::IAM::Role
